!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);function i(t,e,r,i){if(isNaN(e)||isNaN(r))return t;var n,s,h,o,a,l,u,d,f,c=t._root,_={data:i},y=t._x0,x=t._y0,p=t._x1,v=t._y1;if(!c)return t._root=_,t;for(;c.length;)if((l=e>=(s=(y+p)/2))?y=s:p=s,(u=r>=(h=(x+v)/2))?x=h:v=h,n=c,!(c=c[d=u<<1|l]))return n[d]=_,t;if(o=+t._x.call(null,c.data),a=+t._y.call(null,c.data),e===o&&r===a)return _.next=c,n?n[d]=_:t._root=_,t;do{n=n?n[d]=new Array(4):t._root=new Array(4),(l=e>=(s=(y+p)/2))?y=s:p=s,(u=r>=(h=(x+v)/2))?x=h:v=h}while((d=u<<1|l)==(f=(a>=h)<<1|o>=s));return n[f]=c,n[d]=_,t}var n=function(t,e,r,i,n){this.node=t,this.x0=e,this.y0=r,this.x1=i,this.y1=n};function s(t){return t[0]}function h(t){return t[1]}function o(t,e,r){var i=new a(null==e?s:e,null==r?h:r,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function a(t,e,r,i,n,s){this._x=t,this._y=e,this._x0=r,this._y0=i,this._x1=n,this._y1=s,this._root=void 0}function l(t){for(var e={data:t.data},r=e;t=t.next;)r=r.next={data:t.data};return e}var u=o.prototype=a.prototype;u.copy=function(){var t,e,r=new a(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return r;if(!i.length)return r._root=l(i),r;for(t=[{source:i,target:r._root=new Array(4)}];i=t.pop();)for(var n=0;n<4;++n)(e=i.source[n])&&(e.length?t.push({source:e,target:i.target[n]=new Array(4)}):i.target[n]=l(e));return r},u.add=function(t){var e=+this._x.call(null,t),r=+this._y.call(null,t);return i(this.cover(e,r),e,r,t)},u.addAll=function(t){var e,r,n,s,h=t.length,o=new Array(h),a=new Array(h),l=1/0,u=1/0,d=-1/0,f=-1/0;for(r=0;r<h;++r)isNaN(n=+this._x.call(null,e=t[r]))||isNaN(s=+this._y.call(null,e))||(o[r]=n,a[r]=s,n<l&&(l=n),n>d&&(d=n),s<u&&(u=s),s>f&&(f=s));if(l>d||u>f)return this;for(this.cover(l,u).cover(d,f),r=0;r<h;++r)i(this,o[r],a[r],t[r]);return this},u.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var r=this._x0,i=this._y0,n=this._x1,s=this._y1;if(isNaN(r))n=(r=Math.floor(t))+1,s=(i=Math.floor(e))+1;else{for(var h,o,a=n-r,l=this._root;r>t||t>=n||i>e||e>=s;)switch(o=(e<i)<<1|t<r,(h=new Array(4))[o]=l,l=h,a*=2,o){case 0:n=r+a,s=i+a;break;case 1:r=n-a,s=i+a;break;case 2:n=r+a,i=s-a;break;case 3:r=n-a,i=s-a}this._root&&this._root.length&&(this._root=l)}return this._x0=r,this._y0=i,this._x1=n,this._y1=s,this},u.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},u.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},u.find=function(t,e,r){var i,s,h,o,a,l,u,d=this._x0,f=this._y0,c=this._x1,_=this._y1,y=[],x=this._root;for(x&&y.push(new n(x,d,f,c,_)),null==r?r=1/0:(d=t-r,f=e-r,c=t+r,_=e+r,r*=r);l=y.pop();)if(!(!(x=l.node)||(s=l.x0)>c||(h=l.y0)>_||(o=l.x1)<d||(a=l.y1)<f))if(x.length){var p=(s+o)/2,v=(h+a)/2;y.push(new n(x[3],p,v,o,a),new n(x[2],s,v,p,a),new n(x[1],p,h,o,v),new n(x[0],s,h,p,v)),(u=(e>=v)<<1|t>=p)&&(l=y[y.length-1],y[y.length-1]=y[y.length-1-u],y[y.length-1-u]=l)}else{var g=t-+this._x.call(null,x.data),N=e-+this._y.call(null,x.data),w=g*g+N*N;if(w<r){var m=Math.sqrt(r=w);d=t-m,f=e-m,c=t+m,_=e+m,i=x.data}}return i},u.remove=function(t){if(isNaN(s=+this._x.call(null,t))||isNaN(h=+this._y.call(null,t)))return this;var e,r,i,n,s,h,o,a,l,u,d,f,c=this._root,_=this._x0,y=this._y0,x=this._x1,p=this._y1;if(!c)return this;if(c.length)for(;;){if((l=s>=(o=(_+x)/2))?_=o:x=o,(u=h>=(a=(y+p)/2))?y=a:p=a,e=c,!(c=c[d=u<<1|l]))return this;if(!c.length)break;(e[d+1&3]||e[d+2&3]||e[d+3&3])&&(r=e,f=d)}for(;c.data!==t;)if(i=c,!(c=c.next))return this;return(n=c.next)&&delete c.next,i?(n?i.next=n:delete i.next,this):e?(n?e[d]=n:delete e[d],(c=e[0]||e[1]||e[2]||e[3])&&c===(e[3]||e[2]||e[1]||e[0])&&!c.length&&(r?r[f]=c:this._root=c),this):(this._root=n,this)},u.removeAll=function(t){for(var e=0,r=t.length;e<r;++e)this.remove(t[e]);return this},u.root=function(){return this._root},u.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},u.visit=function(t){var e,r,i,s,h,o,a=[],l=this._root;for(l&&a.push(new n(l,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(l=e.node,i=e.x0,s=e.y0,h=e.x1,o=e.y1)&&l.length){var u=(i+h)/2,d=(s+o)/2;(r=l[3])&&a.push(new n(r,u,d,h,o)),(r=l[2])&&a.push(new n(r,i,d,u,o)),(r=l[1])&&a.push(new n(r,u,s,h,d)),(r=l[0])&&a.push(new n(r,i,s,u,d))}return this},u.visitAfter=function(t){var e,r=[],i=[];for(this._root&&r.push(new n(this._root,this._x0,this._y0,this._x1,this._y1));e=r.pop();){var s=e.node;if(s.length){var h,o=e.x0,a=e.y0,l=e.x1,u=e.y1,d=(o+l)/2,f=(a+u)/2;(h=s[0])&&r.push(new n(h,o,a,d,f)),(h=s[1])&&r.push(new n(h,d,a,l,f)),(h=s[2])&&r.push(new n(h,o,f,d,u)),(h=s[3])&&r.push(new n(h,d,f,l,u))}i.push(e)}for(;e=i.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},u.x=function(t){return arguments.length?(this._x=t,this):this._x},u.y=function(t){return arguments.length?(this._y=t,this):this._y};var d=document.getElementById("app").getContext("2d");class f{constructor(t,e,r=null){this.x=t,this.y=e,this.parent=r,this.children=[],this.parent&&this.parent.children.push(this)}render(){this.parent&&(d.moveTo(this.parent.x,this.parent.y),d.lineWidth=.5,d.lineTo(this.x,this.y),d.stroke()),d.beginPath(),d.arc(this.x,this.y,2,0,2*Math.PI),d.fill()}}class c{constructor(t,e,r,i){this.quadTree=o(),this.quadTree=this.quadTree.x(t=>t.x),this.quadTree=this.quadTree.y(t=>t.y),this.quadTree.extent([0,0],r),this.validArea=r,this.maxEdgeLength=i,this.startNode=new f(t[0],t[1]),this.goalNode=new f(e[0],e[1]),this.nodes=[this.startNode,this.goalNode],this.quadTree.addAll([this.startNode,this.goalNode]),this.dirtyNodes=[this.startNode,this.goalNode]}sampleLocation(){return Math.random()<.1?[this.goalNode.x,this.goalNode.y]:[this.validArea[0]*(.98*Math.random()+.01),this.validArea[1]*(.98*Math.random()+.01)]}extend(t,e){let r=this.quadTree.find(t,e);const i=Math.sqrt(Math.pow(t-r.x,2)+Math.pow(e-r.y,2));if(i<.01){t=r.x,e=r.y;const i=r;this.quadTree.remove(i),r=this.quadTree.find(t,e),this.quadTree.add(i)}i>this.maxEdgeLength&&(t=r.x+this.maxEdgeLength/i*(t-r.x),e=r.y+this.maxEdgeLength/i*(e-r.y));const n=new f(t,e,r);return this.nodes.push(n),this.quadTree.add(n),this.dirtyNodes.push(n),n}render(){for(let t=0;t<this.dirtyNodes.length;t++)this.dirtyNodes[t].render();this.dirtyNodes=[]}}(()=>{const[t,e]=[50,d.canvas.height-100],[r,i]=[d.canvas.width-50,100],n={rrt:new c([t,e],[r,i],[d.canvas.width,d.canvas.height],100),numNodes:0};d.fillStyle="#f6f8f9",d.fillRect(0,0,d.canvas.width,d.canvas.height),d.font="20px Arial",d.fillStyle="red",d.beginPath(),d.arc(t,e,10,0,2*Math.PI),d.fill(),d.fillText("Start",t-20,e+30),d.fillStyle="green",d.beginPath(),d.arc(r,i,10,0,2*Math.PI),d.fill(),d.fillText("Goal",r-20,i-18),d.fillStyle="black",window.setInterval(()=>(t=>{t.numNodes<1e3&&((t=>{const e=t.rrt,[r,i]=e.sampleLocation();e.extend(r,i),t.numNodes+=1})(t),(t=>{t.rrt.render()})(t))})(n),30)})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,