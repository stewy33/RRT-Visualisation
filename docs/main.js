!function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);function i(t,e,r,i){if(isNaN(e)||isNaN(r))return t;var n,s,h,o,a,l,u,f,d,c=t._root,_={data:i},y=t._x0,x=t._y0,p=t._x1,v=t._y1;if(!c)return t._root=_,t;for(;c.length;)if((l=e>=(s=(y+p)/2))?y=s:p=s,(u=r>=(h=(x+v)/2))?x=h:v=h,n=c,!(c=c[f=u<<1|l]))return n[f]=_,t;if(o=+t._x.call(null,c.data),a=+t._y.call(null,c.data),e===o&&r===a)return _.next=c,n?n[f]=_:t._root=_,t;do{n=n?n[f]=new Array(4):t._root=new Array(4),(l=e>=(s=(y+p)/2))?y=s:p=s,(u=r>=(h=(x+v)/2))?x=h:v=h}while((f=u<<1|l)==(d=(a>=h)<<1|o>=s));return n[d]=c,n[f]=_,t}var n=function(t,e,r,i,n){this.node=t,this.x0=e,this.y0=r,this.x1=i,this.y1=n};function s(t){return t[0]}function h(t){return t[1]}function o(t,e,r){var i=new a(null==e?s:e,null==r?h:r,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function a(t,e,r,i,n,s){this._x=t,this._y=e,this._x0=r,this._y0=i,this._x1=n,this._y1=s,this._root=void 0}function l(t){for(var e={data:t.data},r=e;t=t.next;)r=r.next={data:t.data};return e}var u=o.prototype=a.prototype;u.copy=function(){var t,e,r=new a(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return r;if(!i.length)return r._root=l(i),r;for(t=[{source:i,target:r._root=new Array(4)}];i=t.pop();)for(var n=0;n<4;++n)(e=i.source[n])&&(e.length?t.push({source:e,target:i.target[n]=new Array(4)}):i.target[n]=l(e));return r},u.add=function(t){var e=+this._x.call(null,t),r=+this._y.call(null,t);return i(this.cover(e,r),e,r,t)},u.addAll=function(t){var e,r,n,s,h=t.length,o=new Array(h),a=new Array(h),l=1/0,u=1/0,f=-1/0,d=-1/0;for(r=0;r<h;++r)isNaN(n=+this._x.call(null,e=t[r]))||isNaN(s=+this._y.call(null,e))||(o[r]=n,a[r]=s,n<l&&(l=n),n>f&&(f=n),s<u&&(u=s),s>d&&(d=s));if(l>f||u>d)return this;for(this.cover(l,u).cover(f,d),r=0;r<h;++r)i(this,o[r],a[r],t[r]);return this},u.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var r=this._x0,i=this._y0,n=this._x1,s=this._y1;if(isNaN(r))n=(r=Math.floor(t))+1,s=(i=Math.floor(e))+1;else{for(var h,o,a=n-r,l=this._root;r>t||t>=n||i>e||e>=s;)switch(o=(e<i)<<1|t<r,(h=new Array(4))[o]=l,l=h,a*=2,o){case 0:n=r+a,s=i+a;break;case 1:r=n-a,s=i+a;break;case 2:n=r+a,i=s-a;break;case 3:r=n-a,i=s-a}this._root&&this._root.length&&(this._root=l)}return this._x0=r,this._y0=i,this._x1=n,this._y1=s,this},u.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},u.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},u.find=function(t,e,r){var i,s,h,o,a,l,u,f=this._x0,d=this._y0,c=this._x1,_=this._y1,y=[],x=this._root;for(x&&y.push(new n(x,f,d,c,_)),null==r?r=1/0:(f=t-r,d=e-r,c=t+r,_=e+r,r*=r);l=y.pop();)if(!(!(x=l.node)||(s=l.x0)>c||(h=l.y0)>_||(o=l.x1)<f||(a=l.y1)<d))if(x.length){var p=(s+o)/2,v=(h+a)/2;y.push(new n(x[3],p,v,o,a),new n(x[2],s,v,p,a),new n(x[1],p,h,o,v),new n(x[0],s,h,p,v)),(u=(e>=v)<<1|t>=p)&&(l=y[y.length-1],y[y.length-1]=y[y.length-1-u],y[y.length-1-u]=l)}else{var g=t-+this._x.call(null,x.data),w=e-+this._y.call(null,x.data),N=g*g+w*w;if(N<r){var m=Math.sqrt(r=N);f=t-m,d=e-m,c=t+m,_=e+m,i=x.data}}return i},u.remove=function(t){if(isNaN(s=+this._x.call(null,t))||isNaN(h=+this._y.call(null,t)))return this;var e,r,i,n,s,h,o,a,l,u,f,d,c=this._root,_=this._x0,y=this._y0,x=this._x1,p=this._y1;if(!c)return this;if(c.length)for(;;){if((l=s>=(o=(_+x)/2))?_=o:x=o,(u=h>=(a=(y+p)/2))?y=a:p=a,e=c,!(c=c[f=u<<1|l]))return this;if(!c.length)break;(e[f+1&3]||e[f+2&3]||e[f+3&3])&&(r=e,d=f)}for(;c.data!==t;)if(i=c,!(c=c.next))return this;return(n=c.next)&&delete c.next,i?(n?i.next=n:delete i.next,this):e?(n?e[f]=n:delete e[f],(c=e[0]||e[1]||e[2]||e[3])&&c===(e[3]||e[2]||e[1]||e[0])&&!c.length&&(r?r[d]=c:this._root=c),this):(this._root=n,this)},u.removeAll=function(t){for(var e=0,r=t.length;e<r;++e)this.remove(t[e]);return this},u.root=function(){return this._root},u.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},u.visit=function(t){var e,r,i,s,h,o,a=[],l=this._root;for(l&&a.push(new n(l,this._x0,this._y0,this._x1,this._y1));e=a.pop();)if(!t(l=e.node,i=e.x0,s=e.y0,h=e.x1,o=e.y1)&&l.length){var u=(i+h)/2,f=(s+o)/2;(r=l[3])&&a.push(new n(r,u,f,h,o)),(r=l[2])&&a.push(new n(r,i,f,u,o)),(r=l[1])&&a.push(new n(r,u,s,h,f)),(r=l[0])&&a.push(new n(r,i,s,u,f))}return this},u.visitAfter=function(t){var e,r=[],i=[];for(this._root&&r.push(new n(this._root,this._x0,this._y0,this._x1,this._y1));e=r.pop();){var s=e.node;if(s.length){var h,o=e.x0,a=e.y0,l=e.x1,u=e.y1,f=(o+l)/2,d=(a+u)/2;(h=s[0])&&r.push(new n(h,o,a,f,d)),(h=s[1])&&r.push(new n(h,f,a,l,d)),(h=s[2])&&r.push(new n(h,o,d,f,u)),(h=s[3])&&r.push(new n(h,f,d,l,u))}i.push(e)}for(;e=i.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},u.x=function(t){return arguments.length?(this._x=t,this):this._x},u.y=function(t){return arguments.length?(this._y=t,this):this._y};var f=document.getElementById("app").getContext("2d");class d{constructor(t,e,r=null){this.x=t,this.y=e,this.parent=r,this.children=[],this.parent&&this.parent.children.push(this)}render(){this.parent&&(f.moveTo(this.parent.x,this.parent.y),f.lineWidth=.5,f.lineTo(this.x,this.y),f.stroke()),f.beginPath(),f.arc(this.x,this.y,2,0,2*Math.PI),f.fill()}}class c{constructor(t,e,r,i){this.quadTree=o(),this.quadTree=this.quadTree.x(t=>t.x),this.quadTree=this.quadTree.y(t=>t.y),this.quadTree.extent([0,0],r),this.validArea=r,this.maxEdgeLength=i;const n=new d(t[0],t[1]),s=new d(e[0],e[1]);this.nodes=[n,s],this.quadTree.addAll([n,s]),this.dirtyNodes=[n,s]}sampleLocation(){return[this.validArea[0]*(.98*Math.random()+.01),this.validArea[1]*(.98*Math.random()+.01)]}extend(t,e){const r=this.quadTree.find(t,e),i=Math.sqrt(Math.pow(t-r.x,2)+Math.pow(e-r.y,2));i>this.maxEdgeLength&&(t=r.x+this.maxEdgeLength/i*(t-r.x),e=r.y+this.maxEdgeLength/i*(e-r.y));const n=new d(t,e,r);return this.nodes.push(n),this.quadTree.add(n),this.dirtyNodes.push(n),n}render(){for(let t=0;t<this.dirtyNodes.length;t++)this.dirtyNodes[t].render();this.dirtyNodes=[]}}(()=>{const[t,e]=[50,f.canvas.height-100],[r,i]=[f.canvas.width-50,100],n={rrt:new c([t,e],[r,i],[f.canvas.width,f.canvas.height],100),numNodes:0};f.fillStyle="#f6f8f9",f.fillRect(0,0,f.canvas.width,f.canvas.height),f.font="20px Arial",f.fillStyle="red",f.beginPath(),f.arc(t,e,10,0,2*Math.PI),f.fill(),f.fillText("Start",t-20,e+30),f.fillStyle="green",f.beginPath(),f.arc(r,i,10,0,2*Math.PI),f.fill(),f.fillText("Goal",r-20,i-18),f.fillStyle="black",window.setInterval(()=>(t=>{t.numNodes<1e3&&((t=>{const e=t.rrt,[r,i]=e.sampleLocation();e.extend(r,i),t.numNodes+=1})(t),(t=>{t.rrt.render()})(t))})(n),30)})()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9hZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9jb3Zlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3F1YWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy94LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMveS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3F1YWR0cmVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2V4dGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXF1YWR0cmVlL3NyYy9yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcXVhZHRyZWUvc3JjL3Zpc2l0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1xdWFkdHJlZS9zcmMvdmlzaXRBZnRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJ0cmVlIiwieCIsInkiLCJpc05hTiIsInBhcmVudCIsInhtIiwieW0iLCJ4cCIsInlwIiwicmlnaHQiLCJib3R0b20iLCJqIiwibm9kZSIsIl9yb290IiwibGVhZiIsImRhdGEiLCJ4MCIsIl94MCIsInkwIiwiX3kwIiwieDEiLCJfeDEiLCJ5MSIsIl95MSIsImxlbmd0aCIsIl94IiwiX3kiLCJuZXh0IiwiQXJyYXkiLCJ0aGlzIiwiZGVmYXVsdFgiLCJkZWZhdWx0WSIsInF1YWR0cmVlIiwibm9kZXMiLCJRdWFkdHJlZSIsIk5hTiIsImFkZEFsbCIsInVuZGVmaW5lZCIsImxlYWZfY29weSIsImNvcHkiLCJ0cmVlUHJvdG8iLCJjaGlsZCIsInNvdXJjZSIsInRhcmdldCIsInBvcCIsInB1c2giLCJhZGQiLCJjb3ZlciIsInh6IiwieXoiLCJJbmZpbml0eSIsIk1hdGgiLCJmbG9vciIsInoiLCJ2aXNpdCIsImV4dGVudCIsImFyZ3VtZW50cyIsIl8iLCJmaW5kIiwieDIiLCJ5MiIsInEiLCJ4MyIsInkzIiwicXVhZHMiLCJyYWRpdXMiLCJkeCIsImR5IiwiZDIiLCJzcXJ0IiwicmVtb3ZlIiwicmV0YWluZXIiLCJwcmV2aW91cyIsInJlbW92ZUFsbCIsInJvb3QiLCJzaXplIiwiY2FsbGJhY2siLCJ2aXNpdEFmdGVyIiwiY3R4IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJOb2RlIiwiY2hpbGRyZW4iLCJtb3ZlVG8iLCJsaW5lV2lkdGgiLCJsaW5lVG8iLCJzdHJva2UiLCJiZWdpblBhdGgiLCJhcmMiLCJQSSIsImZpbGwiLCJzdGFydE5vZGVQb3MiLCJnb2FsTm9kZVBvcyIsInZhbGlkQXJlYSIsIm1heEVkZ2VMZW5ndGgiLCJxdWFkVHJlZSIsInN0YXJ0Tm9kZSIsImdvYWxOb2RlIiwiZGlydHlOb2RlcyIsInJhbmRvbSIsImRpc3RUb05lYXJlc3ROb2RlIiwicG93IiwibmV3Tm9kZSIsInJlbmRlciIsInN0YXJ0WCIsInN0YXJ0WSIsImNhbnZhcyIsImhlaWdodCIsImdvYWxYIiwiZ29hbFkiLCJ3aWR0aCIsIndvcmxkIiwicnJ0IiwibnVtTm9kZXMiLCJmaWxsU3R5bGUiLCJmaWxsUmVjdCIsImZvbnQiLCJmaWxsVGV4dCIsIndpbmRvdyIsInNldEludGVydmFsIiwic2FtcGxlTG9jYXRpb24iLCJleHRlbmQiLCJ1cGRhdGUiLCJzdGVwIiwiZ28iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZ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QlMsQ0FBT1gsR0FOSUEsS0FDYkEsRUFBTUMsSUFBSVQsVUFNUkEsQ0FBT1EsS0F5Q2dCWSxDQUFLWixHQUFRLEtBR3hDYSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZCkge1xuICB2YXIgeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCksXG4gICAgICB5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKTtcbiAgcmV0dXJuIGFkZCh0aGlzLmNvdmVyKHgsIHkpLCB4LCB5LCBkKTtcbn1cblxuZnVuY3Rpb24gYWRkKHRyZWUsIHgsIHksIGQpIHtcbiAgaWYgKGlzTmFOKHgpIHx8IGlzTmFOKHkpKSByZXR1cm4gdHJlZTsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0cmVlLl9yb290LFxuICAgICAgbGVhZiA9IHtkYXRhOiBkfSxcbiAgICAgIHgwID0gdHJlZS5feDAsXG4gICAgICB5MCA9IHRyZWUuX3kwLFxuICAgICAgeDEgPSB0cmVlLl94MSxcbiAgICAgIHkxID0gdHJlZS5feTEsXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgeHAsXG4gICAgICB5cCxcbiAgICAgIHJpZ2h0LFxuICAgICAgYm90dG9tLFxuICAgICAgaSxcbiAgICAgIGo7XG5cbiAgLy8gSWYgdGhlIHRyZWUgaXMgZW1wdHksIGluaXRpYWxpemUgdGhlIHJvb3QgYXMgYSBsZWFmLlxuICBpZiAoIW5vZGUpIHJldHVybiB0cmVlLl9yb290ID0gbGVhZiwgdHJlZTtcblxuICAvLyBGaW5kIHRoZSBleGlzdGluZyBsZWFmIGZvciB0aGUgbmV3IHBvaW50LCBvciBhZGQgaXQuXG4gIHdoaWxlIChub2RlLmxlbmd0aCkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmIChwYXJlbnQgPSBub2RlLCAhKG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiBwYXJlbnRbaV0gPSBsZWFmLCB0cmVlO1xuICB9XG5cbiAgLy8gSXMgdGhlIG5ldyBwb2ludCBpcyBleGFjdGx5IGNvaW5jaWRlbnQgd2l0aCB0aGUgZXhpc3RpbmcgcG9pbnQ/XG4gIHhwID0gK3RyZWUuX3guY2FsbChudWxsLCBub2RlLmRhdGEpO1xuICB5cCA9ICt0cmVlLl95LmNhbGwobnVsbCwgbm9kZS5kYXRhKTtcbiAgaWYgKHggPT09IHhwICYmIHkgPT09IHlwKSByZXR1cm4gbGVhZi5uZXh0ID0gbm9kZSwgcGFyZW50ID8gcGFyZW50W2ldID0gbGVhZiA6IHRyZWUuX3Jvb3QgPSBsZWFmLCB0cmVlO1xuXG4gIC8vIE90aGVyd2lzZSwgc3BsaXQgdGhlIGxlYWYgbm9kZSB1bnRpbCB0aGUgb2xkIGFuZCBuZXcgcG9pbnQgYXJlIHNlcGFyYXRlZC5cbiAgZG8ge1xuICAgIHBhcmVudCA9IHBhcmVudCA/IHBhcmVudFtpXSA9IG5ldyBBcnJheSg0KSA6IHRyZWUuX3Jvb3QgPSBuZXcgQXJyYXkoNCk7XG4gICAgaWYgKHJpZ2h0ID0geCA+PSAoeG0gPSAoeDAgKyB4MSkgLyAyKSkgeDAgPSB4bTsgZWxzZSB4MSA9IHhtO1xuICAgIGlmIChib3R0b20gPSB5ID49ICh5bSA9ICh5MCArIHkxKSAvIDIpKSB5MCA9IHltOyBlbHNlIHkxID0geW07XG4gIH0gd2hpbGUgKChpID0gYm90dG9tIDw8IDEgfCByaWdodCkgPT09IChqID0gKHlwID49IHltKSA8PCAxIHwgKHhwID49IHhtKSkpO1xuICByZXR1cm4gcGFyZW50W2pdID0gbm9kZSwgcGFyZW50W2ldID0gbGVhZiwgdHJlZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEFsbChkYXRhKSB7XG4gIHZhciBkLCBpLCBuID0gZGF0YS5sZW5ndGgsXG4gICAgICB4LFxuICAgICAgeSxcbiAgICAgIHh6ID0gbmV3IEFycmF5KG4pLFxuICAgICAgeXogPSBuZXcgQXJyYXkobiksXG4gICAgICB4MCA9IEluZmluaXR5LFxuICAgICAgeTAgPSBJbmZpbml0eSxcbiAgICAgIHgxID0gLUluZmluaXR5LFxuICAgICAgeTEgPSAtSW5maW5pdHk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgcG9pbnRzIGFuZCB0aGVpciBleHRlbnQuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoaXNOYU4oeCA9ICt0aGlzLl94LmNhbGwobnVsbCwgZCA9IGRhdGFbaV0pKSB8fCBpc05hTih5ID0gK3RoaXMuX3kuY2FsbChudWxsLCBkKSkpIGNvbnRpbnVlO1xuICAgIHh6W2ldID0geDtcbiAgICB5eltpXSA9IHk7XG4gICAgaWYgKHggPCB4MCkgeDAgPSB4O1xuICAgIGlmICh4ID4geDEpIHgxID0geDtcbiAgICBpZiAoeSA8IHkwKSB5MCA9IHk7XG4gICAgaWYgKHkgPiB5MSkgeTEgPSB5O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgd2VyZSBubyAodmFsaWQpIHBvaW50cywgYWJvcnQuXG4gIGlmICh4MCA+IHgxIHx8IHkwID4geTEpIHJldHVybiB0aGlzO1xuXG4gIC8vIEV4cGFuZCB0aGUgdHJlZSB0byBjb3ZlciB0aGUgbmV3IHBvaW50cy5cbiAgdGhpcy5jb3Zlcih4MCwgeTApLmNvdmVyKHgxLCB5MSk7XG5cbiAgLy8gQWRkIHRoZSBuZXcgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgYWRkKHRoaXMsIHh6W2ldLCB5eltpXSwgZGF0YVtpXSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHkpIHtcbiAgaWYgKGlzTmFOKHggPSAreCkgfHwgaXNOYU4oeSA9ICt5KSkgcmV0dXJuIHRoaXM7IC8vIGlnbm9yZSBpbnZhbGlkIHBvaW50c1xuXG4gIHZhciB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxO1xuXG4gIC8vIElmIHRoZSBxdWFkdHJlZSBoYXMgbm8gZXh0ZW50LCBpbml0aWFsaXplIHRoZW0uXG4gIC8vIEludGVnZXIgZXh0ZW50IGFyZSBuZWNlc3Nhcnkgc28gdGhhdCBpZiB3ZSBsYXRlciBkb3VibGUgdGhlIGV4dGVudCxcbiAgLy8gdGhlIGV4aXN0aW5nIHF1YWRyYW50IGJvdW5kYXJpZXMgZG9u4oCZdCBjaGFuZ2UgZHVlIHRvIGZsb2F0aW5nIHBvaW50IGVycm9yIVxuICBpZiAoaXNOYU4oeDApKSB7XG4gICAgeDEgPSAoeDAgPSBNYXRoLmZsb29yKHgpKSArIDE7XG4gICAgeTEgPSAoeTAgPSBNYXRoLmZsb29yKHkpKSArIDE7XG4gIH1cblxuICAvLyBPdGhlcndpc2UsIGRvdWJsZSByZXBlYXRlZGx5IHRvIGNvdmVyLlxuICBlbHNlIHtcbiAgICB2YXIgeiA9IHgxIC0geDAsXG4gICAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIGk7XG5cbiAgICB3aGlsZSAoeDAgPiB4IHx8IHggPj0geDEgfHwgeTAgPiB5IHx8IHkgPj0geTEpIHtcbiAgICAgIGkgPSAoeSA8IHkwKSA8PCAxIHwgKHggPCB4MCk7XG4gICAgICBwYXJlbnQgPSBuZXcgQXJyYXkoNCksIHBhcmVudFtpXSA9IG5vZGUsIG5vZGUgPSBwYXJlbnQsIHogKj0gMjtcbiAgICAgIHN3aXRjaCAoaSkge1xuICAgICAgICBjYXNlIDA6IHgxID0geDAgKyB6LCB5MSA9IHkwICsgejsgYnJlYWs7XG4gICAgICAgIGNhc2UgMTogeDAgPSB4MSAtIHosIHkxID0geTAgKyB6OyBicmVhaztcbiAgICAgICAgY2FzZSAyOiB4MSA9IHgwICsgeiwgeTAgPSB5MSAtIHo7IGJyZWFrO1xuICAgICAgICBjYXNlIDM6IHgwID0geDEgLSB6LCB5MCA9IHkxIC0gejsgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3Jvb3QgJiYgdGhpcy5fcm9vdC5sZW5ndGgpIHRoaXMuX3Jvb3QgPSBub2RlO1xuICB9XG5cbiAgdGhpcy5feDAgPSB4MDtcbiAgdGhpcy5feTAgPSB5MDtcbiAgdGhpcy5feDEgPSB4MTtcbiAgdGhpcy5feTEgPSB5MTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCB4MCwgeTAsIHgxLCB5MSkge1xuICB0aGlzLm5vZGUgPSBub2RlO1xuICB0aGlzLngwID0geDA7XG4gIHRoaXMueTAgPSB5MDtcbiAgdGhpcy54MSA9IHgxO1xuICB0aGlzLnkxID0geTE7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZGVmYXVsdFgoZCkge1xuICByZXR1cm4gZFswXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh0aGlzLl94ID0gXywgdGhpcykgOiB0aGlzLl94O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRZKGQpIHtcbiAgcmV0dXJuIGRbMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKF8pIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodGhpcy5feSA9IF8sIHRoaXMpIDogdGhpcy5feTtcbn1cbiIsImltcG9ydCB0cmVlX2FkZCwge2FkZEFsbCBhcyB0cmVlX2FkZEFsbH0gZnJvbSBcIi4vYWRkLmpzXCI7XG5pbXBvcnQgdHJlZV9jb3ZlciBmcm9tIFwiLi9jb3Zlci5qc1wiO1xuaW1wb3J0IHRyZWVfZGF0YSBmcm9tIFwiLi9kYXRhLmpzXCI7XG5pbXBvcnQgdHJlZV9leHRlbnQgZnJvbSBcIi4vZXh0ZW50LmpzXCI7XG5pbXBvcnQgdHJlZV9maW5kIGZyb20gXCIuL2ZpbmQuanNcIjtcbmltcG9ydCB0cmVlX3JlbW92ZSwge3JlbW92ZUFsbCBhcyB0cmVlX3JlbW92ZUFsbH0gZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJlZV9yb290IGZyb20gXCIuL3Jvb3QuanNcIjtcbmltcG9ydCB0cmVlX3NpemUgZnJvbSBcIi4vc2l6ZS5qc1wiO1xuaW1wb3J0IHRyZWVfdmlzaXQgZnJvbSBcIi4vdmlzaXQuanNcIjtcbmltcG9ydCB0cmVlX3Zpc2l0QWZ0ZXIgZnJvbSBcIi4vdmlzaXRBZnRlci5qc1wiO1xuaW1wb3J0IHRyZWVfeCwge2RlZmF1bHRYfSBmcm9tIFwiLi94LmpzXCI7XG5pbXBvcnQgdHJlZV95LCB7ZGVmYXVsdFl9IGZyb20gXCIuL3kuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcXVhZHRyZWUobm9kZXMsIHgsIHkpIHtcbiAgdmFyIHRyZWUgPSBuZXcgUXVhZHRyZWUoeCA9PSBudWxsID8gZGVmYXVsdFggOiB4LCB5ID09IG51bGwgPyBkZWZhdWx0WSA6IHksIE5hTiwgTmFOLCBOYU4sIE5hTik7XG4gIHJldHVybiBub2RlcyA9PSBudWxsID8gdHJlZSA6IHRyZWUuYWRkQWxsKG5vZGVzKTtcbn1cblxuZnVuY3Rpb24gUXVhZHRyZWUoeCwgeSwgeDAsIHkwLCB4MSwgeTEpIHtcbiAgdGhpcy5feCA9IHg7XG4gIHRoaXMuX3kgPSB5O1xuICB0aGlzLl94MCA9IHgwO1xuICB0aGlzLl95MCA9IHkwO1xuICB0aGlzLl94MSA9IHgxO1xuICB0aGlzLl95MSA9IHkxO1xuICB0aGlzLl9yb290ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBsZWFmX2NvcHkobGVhZikge1xuICB2YXIgY29weSA9IHtkYXRhOiBsZWFmLmRhdGF9LCBuZXh0ID0gY29weTtcbiAgd2hpbGUgKGxlYWYgPSBsZWFmLm5leHQpIG5leHQgPSBuZXh0Lm5leHQgPSB7ZGF0YTogbGVhZi5kYXRhfTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbnZhciB0cmVlUHJvdG8gPSBxdWFkdHJlZS5wcm90b3R5cGUgPSBRdWFkdHJlZS5wcm90b3R5cGU7XG5cbnRyZWVQcm90by5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb3B5ID0gbmV3IFF1YWR0cmVlKHRoaXMuX3gsIHRoaXMuX3ksIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgbm9kZXMsXG4gICAgICBjaGlsZDtcblxuICBpZiAoIW5vZGUpIHJldHVybiBjb3B5O1xuXG4gIGlmICghbm9kZS5sZW5ndGgpIHJldHVybiBjb3B5Ll9yb290ID0gbGVhZl9jb3B5KG5vZGUpLCBjb3B5O1xuXG4gIG5vZGVzID0gW3tzb3VyY2U6IG5vZGUsIHRhcmdldDogY29weS5fcm9vdCA9IG5ldyBBcnJheSg0KX1dO1xuICB3aGlsZSAobm9kZSA9IG5vZGVzLnBvcCgpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyArK2kpIHtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGUuc291cmNlW2ldKSB7XG4gICAgICAgIGlmIChjaGlsZC5sZW5ndGgpIG5vZGVzLnB1c2goe3NvdXJjZTogY2hpbGQsIHRhcmdldDogbm9kZS50YXJnZXRbaV0gPSBuZXcgQXJyYXkoNCl9KTtcbiAgICAgICAgZWxzZSBub2RlLnRhcmdldFtpXSA9IGxlYWZfY29weShjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNvcHk7XG59O1xuXG50cmVlUHJvdG8uYWRkID0gdHJlZV9hZGQ7XG50cmVlUHJvdG8uYWRkQWxsID0gdHJlZV9hZGRBbGw7XG50cmVlUHJvdG8uY292ZXIgPSB0cmVlX2NvdmVyO1xudHJlZVByb3RvLmRhdGEgPSB0cmVlX2RhdGE7XG50cmVlUHJvdG8uZXh0ZW50ID0gdHJlZV9leHRlbnQ7XG50cmVlUHJvdG8uZmluZCA9IHRyZWVfZmluZDtcbnRyZWVQcm90by5yZW1vdmUgPSB0cmVlX3JlbW92ZTtcbnRyZWVQcm90by5yZW1vdmVBbGwgPSB0cmVlX3JlbW92ZUFsbDtcbnRyZWVQcm90by5yb290ID0gdHJlZV9yb290O1xudHJlZVByb3RvLnNpemUgPSB0cmVlX3NpemU7XG50cmVlUHJvdG8udmlzaXQgPSB0cmVlX3Zpc2l0O1xudHJlZVByb3RvLnZpc2l0QWZ0ZXIgPSB0cmVlX3Zpc2l0QWZ0ZXI7XG50cmVlUHJvdG8ueCA9IHRyZWVfeDtcbnRyZWVQcm90by55ID0gdHJlZV95O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBkYXRhID0gW107XG4gIHRoaXMudmlzaXQoZnVuY3Rpb24obm9kZSkge1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGRvIGRhdGEucHVzaChub2RlLmRhdGEpOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBkYXRhO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oXykge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmNvdmVyKCtfWzBdWzBdLCArX1swXVsxXSkuY292ZXIoK19bMV1bMF0sICtfWzFdWzFdKVxuICAgICAgOiBpc05hTih0aGlzLl94MCkgPyB1bmRlZmluZWQgOiBbW3RoaXMuX3gwLCB0aGlzLl95MF0sIFt0aGlzLl94MSwgdGhpcy5feTFdXTtcbn1cbiIsImltcG9ydCBRdWFkIGZyb20gXCIuL3F1YWQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgeSwgcmFkaXVzKSB7XG4gIHZhciBkYXRhLFxuICAgICAgeDAgPSB0aGlzLl94MCxcbiAgICAgIHkwID0gdGhpcy5feTAsXG4gICAgICB4MSxcbiAgICAgIHkxLFxuICAgICAgeDIsXG4gICAgICB5MixcbiAgICAgIHgzID0gdGhpcy5feDEsXG4gICAgICB5MyA9IHRoaXMuX3kxLFxuICAgICAgcXVhZHMgPSBbXSxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcSxcbiAgICAgIGk7XG5cbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgeDAsIHkwLCB4MywgeTMpKTtcbiAgaWYgKHJhZGl1cyA9PSBudWxsKSByYWRpdXMgPSBJbmZpbml0eTtcbiAgZWxzZSB7XG4gICAgeDAgPSB4IC0gcmFkaXVzLCB5MCA9IHkgLSByYWRpdXM7XG4gICAgeDMgPSB4ICsgcmFkaXVzLCB5MyA9IHkgKyByYWRpdXM7XG4gICAgcmFkaXVzICo9IHJhZGl1cztcbiAgfVxuXG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcblxuICAgIC8vIFN0b3Agc2VhcmNoaW5nIGlmIHRoaXMgcXVhZHJhbnQgY2Fu4oCZdCBjb250YWluIGEgY2xvc2VyIG5vZGUuXG4gICAgaWYgKCEobm9kZSA9IHEubm9kZSlcbiAgICAgICAgfHwgKHgxID0gcS54MCkgPiB4M1xuICAgICAgICB8fCAoeTEgPSBxLnkwKSA+IHkzXG4gICAgICAgIHx8ICh4MiA9IHEueDEpIDwgeDBcbiAgICAgICAgfHwgKHkyID0gcS55MSkgPCB5MCkgY29udGludWU7XG5cbiAgICAvLyBCaXNlY3QgdGhlIGN1cnJlbnQgcXVhZHJhbnQuXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XG4gICAgICB2YXIgeG0gPSAoeDEgKyB4MikgLyAyLFxuICAgICAgICAgIHltID0gKHkxICsgeTIpIC8gMjtcblxuICAgICAgcXVhZHMucHVzaChcbiAgICAgICAgbmV3IFF1YWQobm9kZVszXSwgeG0sIHltLCB4MiwgeTIpLFxuICAgICAgICBuZXcgUXVhZChub2RlWzJdLCB4MSwgeW0sIHhtLCB5MiksXG4gICAgICAgIG5ldyBRdWFkKG5vZGVbMV0sIHhtLCB5MSwgeDIsIHltKSxcbiAgICAgICAgbmV3IFF1YWQobm9kZVswXSwgeDEsIHkxLCB4bSwgeW0pXG4gICAgICApO1xuXG4gICAgICAvLyBWaXNpdCB0aGUgY2xvc2VzdCBxdWFkcmFudCBmaXJzdC5cbiAgICAgIGlmIChpID0gKHkgPj0geW0pIDw8IDEgfCAoeCA+PSB4bSkpIHtcbiAgICAgICAgcSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDFdO1xuICAgICAgICBxdWFkc1txdWFkcy5sZW5ndGggLSAxXSA9IHF1YWRzW3F1YWRzLmxlbmd0aCAtIDEgLSBpXTtcbiAgICAgICAgcXVhZHNbcXVhZHMubGVuZ3RoIC0gMSAtIGldID0gcTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBWaXNpdCB0aGlzIHBvaW50LiAoVmlzaXRpbmcgY29pbmNpZGVudCBwb2ludHMgaXNu4oCZdCBuZWNlc3NhcnkhKVxuICAgIGVsc2Uge1xuICAgICAgdmFyIGR4ID0geCAtICt0aGlzLl94LmNhbGwobnVsbCwgbm9kZS5kYXRhKSxcbiAgICAgICAgICBkeSA9IHkgLSArdGhpcy5feS5jYWxsKG51bGwsIG5vZGUuZGF0YSksXG4gICAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICAgIGlmIChkMiA8IHJhZGl1cykge1xuICAgICAgICB2YXIgZCA9IE1hdGguc3FydChyYWRpdXMgPSBkMik7XG4gICAgICAgIHgwID0geCAtIGQsIHkwID0geSAtIGQ7XG4gICAgICAgIHgzID0geCArIGQsIHkzID0geSArIGQ7XG4gICAgICAgIGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkKSB7XG4gIGlmIChpc05hTih4ID0gK3RoaXMuX3guY2FsbChudWxsLCBkKSkgfHwgaXNOYU4oeSA9ICt0aGlzLl95LmNhbGwobnVsbCwgZCkpKSByZXR1cm4gdGhpczsgLy8gaWdub3JlIGludmFsaWQgcG9pbnRzXG5cbiAgdmFyIHBhcmVudCxcbiAgICAgIG5vZGUgPSB0aGlzLl9yb290LFxuICAgICAgcmV0YWluZXIsXG4gICAgICBwcmV2aW91cyxcbiAgICAgIG5leHQsXG4gICAgICB4MCA9IHRoaXMuX3gwLFxuICAgICAgeTAgPSB0aGlzLl95MCxcbiAgICAgIHgxID0gdGhpcy5feDEsXG4gICAgICB5MSA9IHRoaXMuX3kxLFxuICAgICAgeCxcbiAgICAgIHksXG4gICAgICB4bSxcbiAgICAgIHltLFxuICAgICAgcmlnaHQsXG4gICAgICBib3R0b20sXG4gICAgICBpLFxuICAgICAgajtcblxuICAvLyBJZiB0aGUgdHJlZSBpcyBlbXB0eSwgaW5pdGlhbGl6ZSB0aGUgcm9vdCBhcyBhIGxlYWYuXG4gIGlmICghbm9kZSkgcmV0dXJuIHRoaXM7XG5cbiAgLy8gRmluZCB0aGUgbGVhZiBub2RlIGZvciB0aGUgcG9pbnQuXG4gIC8vIFdoaWxlIGRlc2NlbmRpbmcsIGFsc28gcmV0YWluIHRoZSBkZWVwZXN0IHBhcmVudCB3aXRoIGEgbm9uLXJlbW92ZWQgc2libGluZy5cbiAgaWYgKG5vZGUubGVuZ3RoKSB3aGlsZSAodHJ1ZSkge1xuICAgIGlmIChyaWdodCA9IHggPj0gKHhtID0gKHgwICsgeDEpIC8gMikpIHgwID0geG07IGVsc2UgeDEgPSB4bTtcbiAgICBpZiAoYm90dG9tID0geSA+PSAoeW0gPSAoeTAgKyB5MSkgLyAyKSkgeTAgPSB5bTsgZWxzZSB5MSA9IHltO1xuICAgIGlmICghKHBhcmVudCA9IG5vZGUsIG5vZGUgPSBub2RlW2kgPSBib3R0b20gPDwgMSB8IHJpZ2h0XSkpIHJldHVybiB0aGlzO1xuICAgIGlmICghbm9kZS5sZW5ndGgpIGJyZWFrO1xuICAgIGlmIChwYXJlbnRbKGkgKyAxKSAmIDNdIHx8IHBhcmVudFsoaSArIDIpICYgM10gfHwgcGFyZW50WyhpICsgMykgJiAzXSkgcmV0YWluZXIgPSBwYXJlbnQsIGogPSBpO1xuICB9XG5cbiAgLy8gRmluZCB0aGUgcG9pbnQgdG8gcmVtb3ZlLlxuICB3aGlsZSAobm9kZS5kYXRhICE9PSBkKSBpZiAoIShwcmV2aW91cyA9IG5vZGUsIG5vZGUgPSBub2RlLm5leHQpKSByZXR1cm4gdGhpcztcbiAgaWYgKG5leHQgPSBub2RlLm5leHQpIGRlbGV0ZSBub2RlLm5leHQ7XG5cbiAgLy8gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGNvaW5jaWRlbnQgcG9pbnRzLCByZW1vdmUganVzdCB0aGUgcG9pbnQuXG4gIGlmIChwcmV2aW91cykgcmV0dXJuIChuZXh0ID8gcHJldmlvdXMubmV4dCA9IG5leHQgOiBkZWxldGUgcHJldmlvdXMubmV4dCksIHRoaXM7XG5cbiAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBwb2ludCwgcmVtb3ZlIGl0LlxuICBpZiAoIXBhcmVudCkgcmV0dXJuIHRoaXMuX3Jvb3QgPSBuZXh0LCB0aGlzO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlYWYuXG4gIG5leHQgPyBwYXJlbnRbaV0gPSBuZXh0IDogZGVsZXRlIHBhcmVudFtpXTtcblxuICAvLyBJZiB0aGUgcGFyZW50IG5vdyBjb250YWlucyBleGFjdGx5IG9uZSBsZWFmLCBjb2xsYXBzZSBzdXBlcmZsdW91cyBwYXJlbnRzLlxuICBpZiAoKG5vZGUgPSBwYXJlbnRbMF0gfHwgcGFyZW50WzFdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbM10pXG4gICAgICAmJiBub2RlID09PSAocGFyZW50WzNdIHx8IHBhcmVudFsyXSB8fCBwYXJlbnRbMV0gfHwgcGFyZW50WzBdKVxuICAgICAgJiYgIW5vZGUubGVuZ3RoKSB7XG4gICAgaWYgKHJldGFpbmVyKSByZXRhaW5lcltqXSA9IG5vZGU7XG4gICAgZWxzZSB0aGlzLl9yb290ID0gbm9kZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQWxsKGRhdGEpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBkYXRhLmxlbmd0aDsgaSA8IG47ICsraSkgdGhpcy5yZW1vdmUoZGF0YVtpXSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9yb290O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy52aXNpdChmdW5jdGlvbihub2RlKSB7XG4gICAgaWYgKCFub2RlLmxlbmd0aCkgZG8gKytzaXplOyB3aGlsZSAobm9kZSA9IG5vZGUubmV4dClcbiAgfSk7XG4gIHJldHVybiBzaXplO1xufVxuIiwiaW1wb3J0IFF1YWQgZnJvbSBcIi4vcXVhZC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaykge1xuICB2YXIgcXVhZHMgPSBbXSwgcSwgbm9kZSA9IHRoaXMuX3Jvb3QsIGNoaWxkLCB4MCwgeTAsIHgxLCB5MTtcbiAgaWYgKG5vZGUpIHF1YWRzLnB1c2gobmV3IFF1YWQobm9kZSwgdGhpcy5feDAsIHRoaXMuX3kwLCB0aGlzLl94MSwgdGhpcy5feTEpKTtcbiAgd2hpbGUgKHEgPSBxdWFkcy5wb3AoKSkge1xuICAgIGlmICghY2FsbGJhY2sobm9kZSA9IHEubm9kZSwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxKSAmJiBub2RlLmxlbmd0aCkge1xuICAgICAgdmFyIHhtID0gKHgwICsgeDEpIC8gMiwgeW0gPSAoeTAgKyB5MSkgLyAyO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVszXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeG0sIHltLCB4MSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMl0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5bSwgeG0sIHkxKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVswXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHkwLCB4bSwgeW0pKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgUXVhZCBmcm9tIFwiLi9xdWFkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHZhciBxdWFkcyA9IFtdLCBuZXh0ID0gW10sIHE7XG4gIGlmICh0aGlzLl9yb290KSBxdWFkcy5wdXNoKG5ldyBRdWFkKHRoaXMuX3Jvb3QsIHRoaXMuX3gwLCB0aGlzLl95MCwgdGhpcy5feDEsIHRoaXMuX3kxKSk7XG4gIHdoaWxlIChxID0gcXVhZHMucG9wKCkpIHtcbiAgICB2YXIgbm9kZSA9IHEubm9kZTtcbiAgICBpZiAobm9kZS5sZW5ndGgpIHtcbiAgICAgIHZhciBjaGlsZCwgeDAgPSBxLngwLCB5MCA9IHEueTAsIHgxID0gcS54MSwgeTEgPSBxLnkxLCB4bSA9ICh4MCArIHgxKSAvIDIsIHltID0gKHkwICsgeTEpIC8gMjtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbMF0pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHgwLCB5MCwgeG0sIHltKSk7XG4gICAgICBpZiAoY2hpbGQgPSBub2RlWzFdKSBxdWFkcy5wdXNoKG5ldyBRdWFkKGNoaWxkLCB4bSwgeTAsIHgxLCB5bSkpO1xuICAgICAgaWYgKGNoaWxkID0gbm9kZVsyXSkgcXVhZHMucHVzaChuZXcgUXVhZChjaGlsZCwgeDAsIHltLCB4bSwgeTEpKTtcbiAgICAgIGlmIChjaGlsZCA9IG5vZGVbM10pIHF1YWRzLnB1c2gobmV3IFF1YWQoY2hpbGQsIHhtLCB5bSwgeDEsIHkxKSk7XG4gICAgfVxuICAgIG5leHQucHVzaChxKTtcbiAgfVxuICB3aGlsZSAocSA9IG5leHQucG9wKCkpIHtcbiAgICBjYWxsYmFjayhxLm5vZGUsIHEueDAsIHEueTAsIHEueDEsIHEueTEpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IHsgcXVhZHRyZWUgfSBmcm9tIFwiZDMtcXVhZHRyZWVcIjtcblxuLy8gU2V0IHVwIGZ1bGxzY3JlZW4gY2FudmFzXG52YXIgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIik7XG52YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcblxuY2xhc3MgTm9kZSB7XG4gIGNvbnN0cnVjdG9yKHgsIHksIHBhcmVudCA9IG51bGwpIHtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudC5jaGlsZHJlbi5wdXNoKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIGN0eC5tb3ZlVG8odGhpcy5wYXJlbnQueCwgdGhpcy5wYXJlbnQueSk7XG4gICAgICBjdHgubGluZVdpZHRoID0gMC41O1xuICAgICAgY3R4LmxpbmVUbyh0aGlzLngsIHRoaXMueSk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmModGhpcy54LCB0aGlzLnksIDIsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICBjdHguZmlsbCgpO1xuICB9XG59XG5cbmNsYXNzIFJSVCB7XG4gIGNvbnN0cnVjdG9yKHN0YXJ0Tm9kZVBvcywgZ29hbE5vZGVQb3MsIHZhbGlkQXJlYSwgbWF4RWRnZUxlbmd0aCkge1xuICAgIC8vIEluaXRpYWxpemUgcXVhZFRyZWUgdXNlZCB0byBmaW5kIG5lYXJlc3Qgbm9kZSB0byBhIHNhbXBsaW5nIGxvY2F0aW9uXG4gICAgdGhpcy5xdWFkVHJlZSA9IHF1YWR0cmVlKCk7XG4gICAgLy8gU2V0IHggYW5kIHkgYWNjZXNzb3JzIGZvciBOb2RlIGRhdGEgdHlwZVxuICAgIHRoaXMucXVhZFRyZWUgPSB0aGlzLnF1YWRUcmVlLngobm9kZSA9PiBub2RlLngpO1xuICAgIHRoaXMucXVhZFRyZWUgPSB0aGlzLnF1YWRUcmVlLnkobm9kZSA9PiBub2RlLnkpO1xuICAgIC8vIFRlbGwgcXVhZHRyZWUgdG8gY292ZXIgcmVjdGFuZ2xlIGZyb20gKDAsIDApIHRvIChjYW52YXMgd2lkdGgsIGNhbnZhcyBoZWlnaHQpXG4gICAgdGhpcy5xdWFkVHJlZS5leHRlbnQoWzAsIDBdLCB2YWxpZEFyZWEpO1xuXG4gICAgdGhpcy52YWxpZEFyZWEgPSB2YWxpZEFyZWE7XG4gICAgdGhpcy5tYXhFZGdlTGVuZ3RoID0gbWF4RWRnZUxlbmd0aDtcblxuICAgIC8vIENyZWF0ZSBhbmQgYWRkIHN0YXJ0IGFuZCBnb2FsIG5vZGVzIHRvIHRyZWVcbiAgICBjb25zdCBzdGFydE5vZGUgPSBuZXcgTm9kZShzdGFydE5vZGVQb3NbMF0sIHN0YXJ0Tm9kZVBvc1sxXSk7XG4gICAgY29uc3QgZ29hbE5vZGUgPSBuZXcgTm9kZShnb2FsTm9kZVBvc1swXSwgZ29hbE5vZGVQb3NbMV0pO1xuICAgIHRoaXMubm9kZXMgPSBbc3RhcnROb2RlLCBnb2FsTm9kZV07XG4gICAgdGhpcy5xdWFkVHJlZS5hZGRBbGwoW3N0YXJ0Tm9kZSwgZ29hbE5vZGVdKTtcbiAgICB0aGlzLmRpcnR5Tm9kZXMgPSBbc3RhcnROb2RlLCBnb2FsTm9kZV07XG4gIH1cblxuICBzYW1wbGVMb2NhdGlvbigpIHtcbiAgICByZXR1cm4gW1xuICAgICAgdGhpcy52YWxpZEFyZWFbMF0gKiAoMC45OCAqIE1hdGgucmFuZG9tKCkgKyAwLjAxKSxcbiAgICAgIHRoaXMudmFsaWRBcmVhWzFdICogKDAuOTggKiBNYXRoLnJhbmRvbSgpICsgMC4wMSlcbiAgICBdO1xuICB9XG5cbiAgLy8gQ3JlYXRlcyBhIG5vZGUgYXQgKHgsIHkpIHdpdGggdGhlIG5lYXJlc3Qgbm9kZSBhcyBpdHMgcGFyZW50XG4gIGV4dGVuZCh4LCB5KSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5xdWFkVHJlZS5maW5kKHgsIHkpO1xuXG4gICAgLy8gTGltaXQgbWF4aW11bSBlZGdlIGxlbmd0aCB3aGlsZSBrZWVwaW5nIHNhbWUgaGVhZGluZ1xuICAgIGNvbnN0IGRpc3RUb05lYXJlc3ROb2RlID0gTWF0aC5zcXJ0KFxuICAgICAgTWF0aC5wb3coeCAtIHBhcmVudC54LCAyKSArIE1hdGgucG93KHkgLSBwYXJlbnQueSwgMilcbiAgICApO1xuICAgIGlmIChkaXN0VG9OZWFyZXN0Tm9kZSA+IHRoaXMubWF4RWRnZUxlbmd0aCkge1xuICAgICAgeCA9IHBhcmVudC54ICsgKHRoaXMubWF4RWRnZUxlbmd0aCAvIGRpc3RUb05lYXJlc3ROb2RlKSAqICh4IC0gcGFyZW50LngpO1xuICAgICAgeSA9IHBhcmVudC55ICsgKHRoaXMubWF4RWRnZUxlbmd0aCAvIGRpc3RUb05lYXJlc3ROb2RlKSAqICh5IC0gcGFyZW50LnkpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBuZXdOb2RlIGFuZCBhZGQgdG8gdHJlZVxuICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgTm9kZSh4LCB5LCBwYXJlbnQpO1xuICAgIHRoaXMubm9kZXMucHVzaChuZXdOb2RlKTtcbiAgICB0aGlzLnF1YWRUcmVlLmFkZChuZXdOb2RlKTtcbiAgICB0aGlzLmRpcnR5Tm9kZXMucHVzaChuZXdOb2RlKTtcblxuICAgIHJldHVybiBuZXdOb2RlO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kaXJ0eU5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmRpcnR5Tm9kZXNbaV0ucmVuZGVyKCk7XG4gICAgfVxuICAgIHRoaXMuZGlydHlOb2RlcyA9IFtdO1xuICB9XG59XG5cbmNvbnN0IHVwZGF0ZSA9IHdvcmxkID0+IHtcbiAgY29uc3QgcnJ0ID0gd29ybGQucnJ0O1xuXG4gIGNvbnN0IFt4LCB5XSA9IHJydC5zYW1wbGVMb2NhdGlvbigpO1xuICBycnQuZXh0ZW5kKHgsIHkpO1xuXG4gIHdvcmxkLm51bU5vZGVzICs9IDE7XG59O1xuXG5jb25zdCByZW5kZXIgPSB3b3JsZCA9PiB7XG4gIHdvcmxkLnJydC5yZW5kZXIoKTtcbn07XG5cbmNvbnN0IHN0ZXAgPSB3b3JsZCA9PiB7XG4gIGlmICh3b3JsZC5udW1Ob2RlcyA8IDEwMDApIHtcbiAgICB1cGRhdGUod29ybGQpO1xuICAgIHJlbmRlcih3b3JsZCk7XG4gIH1cbn07XG5cbmNvbnN0IGdvID0gKCkgPT4ge1xuICBjb25zdCBbc3RhcnRYLCBzdGFydFldID0gWzUwLCBjdHguY2FudmFzLmhlaWdodCAtIDEwMF07XG4gIGNvbnN0IFtnb2FsWCwgZ29hbFldID0gW2N0eC5jYW52YXMud2lkdGggLSA1MCwgMTAwXTtcblxuICBjb25zdCBycnQgPSBuZXcgUlJUKFxuICAgIFtzdGFydFgsIHN0YXJ0WV0sXG4gICAgW2dvYWxYLCBnb2FsWV0sXG4gICAgW2N0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0XSxcbiAgICAxMDBcbiAgKTtcblxuICBjb25zdCB3b3JsZCA9IHtcbiAgICBycnQ6IHJydCxcbiAgICBudW1Ob2RlczogMFxuICB9O1xuXG4gIGN0eC5maWxsU3R5bGUgPSBcIiNmNmY4ZjlcIjtcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIGN0eC5jYW52YXMud2lkdGgsIGN0eC5jYW52YXMuaGVpZ2h0KTtcblxuICAvLyBEcmF3IHN0YXJ0IGFuZCBnb2FsIHJlZ2lvbnNcbiAgY3R4LmZvbnQgPSBcIjIwcHggQXJpYWxcIjtcblxuICBjdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHguYXJjKHN0YXJ0WCwgc3RhcnRZLCAxMCwgMCwgMiAqIE1hdGguUEkpO1xuICBjdHguZmlsbCgpO1xuICBjdHguZmlsbFRleHQoXCJTdGFydFwiLCBzdGFydFggLSAyMCwgc3RhcnRZICsgMzApO1xuXG4gIGN0eC5maWxsU3R5bGUgPSBcImdyZWVuXCI7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4LmFyYyhnb2FsWCwgZ29hbFksIDEwLCAwLCAyICogTWF0aC5QSSk7XG4gIGN0eC5maWxsKCk7XG4gIGN0eC5maWxsVGV4dChcIkdvYWxcIiwgZ29hbFggLSAyMCwgZ29hbFkgLSAxOCk7XG5cbiAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcblxuICAvLyBCZWdpbiBycnQgYWxnbyArIGFuaW1hdGlvblxuICB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4gc3RlcCh3b3JsZCksIDMwKTtcbn07XG5cbmdvKCk7XG4iXSwic291cmNlUm9vdCI6IiJ9